import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import os

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n t√≠ch & D·ª± ƒëo√°n ƒê∆°n h√†ng", layout="wide")

# -----------------------
# 1. X·ª¨ L√ù D·ªÆ LI·ªÜU
# -----------------------
# ƒê∆∞·ªùng d·∫´n file
file_path = os.path.join(os.path.dirname(__file__), "orders_sample_with_stock.csv")

# ƒê·ªçc d·ªØ li·ªáu
try:
    df = pd.read_csv(file_path)
except FileNotFoundError:
    st.error("Kh√¥ng t√¨m th·∫•y file 'orders_sample_with_stock.csv'. H√£y ch·∫Øc ch·∫Øn r·∫±ng file n√†y n·∫±m c√πng th∆∞ m·ª•c v·ªõi app.py.")
    st.stop()

# Ki·ªÉm tra d·ªØ li·ªáu r·ªóng
if df.empty:
    st.error("File d·ªØ li·ªáu r·ªóng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c.")
    st.stop()

# X·ª≠ l√Ω d·ªØ li·ªáu
# Chuy·ªÉn ƒë·ªïi c·ªôt Date sang ƒë·ªãnh d·∫°ng datetime
df['Date'] = pd.to_datetime(df['Date'], format='%m/%d/%Y', errors='coerce')

# T·∫°o c·ªôt Order_Month t·ª´ c·ªôt Date
df['Order_Month'] = df['Date'].dt.month

# X·ª≠ l√Ω gi√° tr·ªã thi·∫øu
df = df.dropna(subset=['Date', 'Order_Month', 'SKU', 'Quantity_Ordered', 'Stock_Remaining', 'Unit_Price'])

# X√≥a c√°c b·∫£n ghi tr√πng l·∫∑p
df = df.drop_duplicates()

# Ki·ªÉm tra v√† chu·∫©n h√≥a d·ªØ li·ªáu s·ªë
df['Quantity_Ordered'] = pd.to_numeric(df['Quantity_Ordered'], errors='coerce').fillna(0).astype(int)
df['Stock_Remaining'] = pd.to_numeric(df['Stock_Remaining'], errors='coerce').fillna(0).astype(int)
df['Unit_Price'] = pd.to_numeric(df['Unit_Price'], errors='coerce').fillna(0).astype(float)

# M√£ h√≥a c·ªôt SKU th√†nh gi√° tr·ªã s·ªë
le = LabelEncoder()
df['SKU_Code'] = le.fit_transform(df['SKU'])

# -----------------------
# 2. KH√ÅM PH√Å D·ªÆ LI·ªÜU
# -----------------------
st.title("üìä Ph√¢n t√≠ch d·ªØ li·ªáu ƒë∆°n h√†ng")
st.subheader("1. T·ªïng quan d·ªØ li·ªáu")
st.write("K√≠ch th∆∞·ªõc d·ªØ li·ªáu:", df.shape)
st.write("C√°c c·ªôt d·ªØ li·ªáu:", df.columns.tolist())
st.dataframe(df.head())

# -----------------------
# 3. TR·ª∞C QUAN H√ìA
# -----------------------
st.subheader("2. Tr·ª±c quan h√≥a d·ªØ li·ªáu")

# Bi·ªÉu ƒë·ªì 1: T·ªïng Quantity theo SKU
st.markdown("### Bi·ªÉu ƒë·ªì 1: T·ªïng s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng theo SKU")
fig1, ax1 = plt.subplots(figsize=(10, 6))
sku_quantity = df.groupby('SKU')['Quantity_Ordered'].sum().sort_values(ascending=False)
sns.barplot(x=sku_quantity.index, y=sku_quantity.values, ax=ax1, palette="muted")
ax1.set_title("T·ªïng Quantity theo SKU", fontsize=14)
ax1.set_xlabel("SKU", fontsize=12)
ax1.set_ylabel("T·ªïng Quantity", fontsize=12)
plt.xticks(rotation=45)
st.pyplot(fig1)
st.code("""
fig1, ax1 = plt.subplots(figsize=(10, 6))
sku_quantity = df.groupby('SKU')['Quantity_Ordered'].sum().sort_values(ascending=False)
sns.barplot(x=sku_quantity.index, y=sku_quantity.values, ax=ax1, palette="muted")
ax1.set_title("T·ªïng Quantity theo SKU", fontsize=14)
ax1.set_xlabel("SKU", fontsize=12)
ax1.set_ylabel("T·ªïng Quantity", fontsize=12)
plt.xticks(rotation=45)
st.pyplot(fig1)
""", language="python")

# Bi·ªÉu ƒë·ªì 2: T·ªìn kho c√≤n l·∫°i theo SKU
st.markdown("### Bi·ªÉu ƒë·ªì 2: T·ªìn kho c√≤n l·∫°i theo SKU")
fig2, ax2 = plt.subplots(figsize=(10, 6))
sku_stock = df.groupby('SKU')['Stock_Remaining'].mean()
sns.barplot(x=sku_stock.index, y=sku_stock.values, ax=ax2, palette="viridis")
ax2.set_title("T·ªìn kho trung b√¨nh theo SKU", fontsize=14)
ax2.set_xlabel("SKU", fontsize=12)
ax2.set_ylabel("T·ªìn kho trung b√¨nh", fontsize=12)
plt.xticks(rotation=45)
st.pyplot(fig2)
st.code("""
fig2, ax2 = plt.subplots(figsize=(10, 6))
sku_stock = df.groupby('SKU')['Stock_Remaining'].mean()
sns.barplot(x=sku_stock.index, y=sku_stock.values, ax=ax2, palette="viridis")
ax2.set_title("T·ªìn kho trung b√¨nh theo SKU", fontsize=14)
ax2.set_xlabel("SKU", fontsize=12)
ax2.set_ylabel("T·ªìn kho trung b√¨nh", fontsize=12)
plt.xticks(rotation=45)
st.pyplot(fig2)
""", language="python")

# Bi·ªÉu ƒë·ªì 3: S·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo th√°ng
st.markdown("### Bi·ªÉu ƒë·ªì 3: S·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo th√°ng")
fig3, ax3 = plt.subplots(figsize=(10, 6))
month_quantity = df.groupby('Order_Month')['Quantity_Ordered'].sum()
sns.lineplot(x=month_quantity.index, y=month_quantity.values, marker='o', ax=ax3, color='b')
ax3.set_title("S·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng theo th√°ng", fontsize=14)
ax3.set_xlabel("Th√°ng", fontsize=12)
ax3.set_ylabel("T·ªïng Quantity", fontsize=12)
st.pyplot(fig3)
st.code("""
fig3, ax3 = plt.subplots(figsize=(10, 6))
month_quantity = df.groupby('Order_Month')['Quantity_Ordered'].sum()
sns.lineplot(x=month_quantity.index, y=month_quantity.values, marker='o', ax=ax3, color='b')
ax3.set_title("S·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng theo th√°ng", fontsize=14)
ax3.set_xlabel("Th√°ng", fontsize=12)
ax3.set_ylabel("T·ªïng Quantity", fontsize=12)
st.pyplot(fig3)
""", language="python")

# Bi·ªÉu ƒë·ªì 4: Ph√¢n b·ªë s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng
st.markdown("### Bi·ªÉu ƒë·ªì 4: Ph√¢n b·ªë s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng (Histogram)")
fig4, ax4 = plt.subplots(figsize=(10, 6))
sns.histplot(df['Quantity_Ordered'], bins=20, kde=True, ax=ax4, color='g')
ax4.set_title("Ph√¢n b·ªë s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng", fontsize=14)
ax4.set_xlabel("Quantity Ordered", fontsize=12)
ax4.set_ylabel("T·∫ßn su·∫•t", fontsize=12)
st.pyplot(fig4)
st.code("""
fig4, ax4 = plt.subplots(figsize=(10, 6))
sns.histplot(df['Quantity_Ordered'], bins=20, kde=True, ax=ax4, color='g')
ax4.set_title("Ph√¢n b·ªë s·ªë l∆∞·ª£ng ƒë·∫∑t h√†ng", fontsize=14)
ax4.set_xlabel("Quantity Ordered", fontsize=12)
ax4.set_ylabel("T·∫ßn su·∫•t", fontsize=12)
st.pyplot(fig4)
""", language="python")

# Bi·ªÉu ƒë·ªì 5: Heatmap t∆∞∆°ng quan
st.markdown("### Bi·ªÉu ƒë·ªì 5: Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c bi·∫øn")
fig5, ax5 = plt.subplots(figsize=(8, 6))
corr = df[['Quantity_Ordered', 'Stock_Remaining', 'Order_Month', 'SKU_Code', 'Unit_Price']].corr()
sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax5, fmt=".2f")
ax5.set_title("Heatmap t∆∞∆°ng quan gi·ªØa c√°c bi·∫øn", fontsize=14)
st.pyplot(fig5)
st.code("""
fig5, ax5 = plt.subplots(figsize=(8, 6))
corr = df[['Quantity_Ordered', 'Stock_Remaining', 'Order_Month', 'SKU_Code', 'Unit_Price']].corr()
sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax5, fmt=".2f")
ax5.set_title("Heatmap t∆∞∆°ng quan gi·ªØa c√°c bi·∫øn", fontsize=14)
st.pyplot(fig5)
""", language="python")

# -----------------------
# 4. M√î H√åNH D·ª∞ ƒêO√ÅN
# -----------------------
st.title("ü§ñ D·ª± ƒëo√°n s·ªë l∆∞·ª£ng ƒë∆°n h√†ng")

# T·∫°o X, y cho m√¥ h√¨nh
X = df[['SKU_Code', 'Stock_Remaining', 'Order_Month', 'Unit_Price']]
y = df['Quantity_Ordered']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Hu·∫•n luy·ªán m√¥ h√¨nh RandomForest
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Giao di·ªán nh·∫≠p li·ªáu cho d·ª± ƒëo√°n
st.subheader("Nh·∫≠p th√¥ng tin ƒë·ªÉ d·ª± ƒëo√°n")
sku_input = st.selectbox("Ch·ªçn s·∫£n ph·∫©m (SKU)", df['SKU'].unique())
stock_input = st.slider("T·ªìn kho hi·ªán t·∫°i", min_value=0, max_value=100, value=10)
month_input = st.slider("Th√°ng ƒë·∫∑t h√†ng", min_value=1, max_value=12, value=6)
unit_price_input = st.slider("ƒê∆°n gi√°", min_value=0.0, max_value=2000.0, value=500.0)

# D·ª± ƒëo√°n
sku_code = le.transform([sku_input])[0]
input_data = [[sku_code, stock_input, month_input, unit_price_input]]
predicted_qty = model.predict(input_data)[0]

# Hi·ªÉn th·ªã k·∫øt qu·∫£
st.subheader("K·∫øt qu·∫£ d·ª± ƒëo√°n:")
st.write(f"S·ªë l∆∞·ª£ng d·ª± ƒëo√°n: **{int(predicted_qty)}** ƒë∆°n v·ªã")
st.code("""
sku_code = le.transform([sku_input])[0]
input_data = [[sku_code, stock_input, month_input, unit_price_input]]
predicted_qty = model.predict(input_data)[0]
st.write(f"S·ªë l∆∞·ª£ng d·ª± ƒëo√°n: **{int(predicted_qty)}** ƒë∆°n v·ªã")
""", language="python")
